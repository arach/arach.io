---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

export interface Props {
  currentPost: CollectionEntry<"blog">;
}

const { currentPost } = Astro.props;

// Get all blog posts in the same series
const allPosts = await getCollection("blog");
const seriesPosts = currentPost.data.series ? allPosts
  .filter(post => 
    post.data.series?.name === currentPost.data.series?.name && 
    !post.data.draft
  )
  .sort((a, b) => (a.data.series?.order || 0) - (b.data.series?.order || 0)) : [];

const currentIndex = seriesPosts.findIndex(post => post.slug === currentPost.slug);
const previousPost = currentIndex > 0 ? seriesPosts[currentIndex - 1] : null;
const nextPost = currentIndex < seriesPosts.length - 1 ? seriesPosts[currentIndex + 1] : null;

// Only show series navigation if the current post is part of a series and series has more than one post
const showSeriesNav = currentPost.data.series && seriesPosts.length > 1;
---

{showSeriesNav && (
<>


  <!-- Series navigation sidebar -->
  <nav 
    id="series-navigation" 
    class="series-navigation" 
    aria-label={`${currentPost.data.series.name} series navigation`}
    aria-hidden="false"
  >
    <button 
      id="series-close" 
      class="series-close" 
      aria-label="Close series navigation"
    >
      √ó
    </button>
  <div class="series-header">
    <p class="series-label">Special Series</p>
    <h3 class="series-title">
      <span class="series-icon">üìö</span>
      {currentPost.data.series.name}
    </h3>
    <p class="series-progress">
      Part {currentPost.data.series.order} of {seriesPosts.length}
    </p>
  </div>

  <div class="series-list">
    {seriesPosts.map((post, index) => {
      const isCurrent = post.slug === currentPost.slug;
      const isCompleted = index < currentIndex;
      
      return (
        <div class={`series-item ${isCurrent ? 'current' : ''} ${isCompleted ? 'completed' : ''}`}>
          <div class="series-number">
            {isCompleted ? '‚úì' : post.data.series?.order}
          </div>
          <div class="series-content">
            {isCurrent ? (
              <span class="series-current-title">{post.data.title}</span>
            ) : (
              <a href={`/posts/${post.slug}/`} class="series-link">
                {post.data.title}
              </a>
            )}
          </div>
        </div>
      );
    })}
  </div>

  <div class="series-navigation-buttons">
    {previousPost && (
      <a href={`/posts/${previousPost.slug}/`} class="series-nav-button prev">
        <span class="nav-direction">‚Üê Previous</span>
        <span class="nav-title">{previousPost.data.title}</span>
      </a>
    )}
    {nextPost && (
      <a href={`/posts/${nextPost.slug}/`} class="series-nav-button next">
        <span class="nav-direction">Next ‚Üí</span>
        <span class="nav-title">{nextPost.data.title}</span>
      </a>
    )}
  </div>
  </nav>

  <!-- Backdrop for tablet view -->
  <div id="series-backdrop" class="series-backdrop" aria-hidden="true"></div>
</>
)}

<style>

  .series-close {
    @apply absolute top-3 right-3 w-8 h-8 
           bg-skin-card-muted hover:bg-skin-card
           rounded-full flex items-center justify-center
           text-xl font-light text-skin-base hover:text-skin-accent
           transition-colors;
    border: none;
    cursor: pointer;
  }

  .series-backdrop {
    @apply fixed inset-0 bg-black bg-opacity-50 z-20 hidden;
    transition: opacity 0.3s ease;
  }

  .series-navigation {
    @apply bg-skin-card border border-skin-line rounded-lg p-5 relative;
    /* Reset prose styles since this sits inside the article */
    color: rgb(var(--color-text-base));
    font-family: inherit;
    transition: transform 0.3s ease;
  }

  /* When collapsed on mobile, minimize spacing */
  @media (max-width: 768px) {
    .series-navigation:not(.mobile-open) {
      margin-bottom: 0 !important;
    }
  }

  /* iPhone: completely hidden by default, slide-down when open */
  @media (max-width: 767px) {
    
    
    .series-close {
      @apply hidden;
    }
    
    .series-backdrop {
      @apply hidden !important;
    }
    
    .series-navigation {
      @apply hidden w-full relative overflow-hidden;
      transform: none !important;
      transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
    }

    .series-navigation.mobile-open {
      @apply block mb-1;
      max-height: 800px; /* Large enough for content */
      opacity: 1;
    }
  }

  /* iPad/Tablet: full-width panel sliding from below header row */
  @media (min-width: 768px) and (max-width: 1024px) {
    .series-navigation {
      @apply w-full bg-skin-card border border-skin-line rounded-lg overflow-hidden;
      max-height: 0;
      opacity: 0;
      transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
      box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }

    .series-navigation.open {
      max-height: 600px; /* Large enough for content */
      opacity: 1;
    }

    .series-backdrop {
      @apply hidden !important;
    }

    .series-close {
      @apply hidden;
    }
  }

  /* Desktop: floating sidebar */
  @media (min-width: 1025px) {
    
    .series-close {
      @apply hidden;
    }
    
    .series-backdrop {
      @apply hidden !important;
    }
    
    .series-navigation {
      @apply fixed top-1/2 transform -translate-y-1/2 z-30 text-left;
      right: 2rem;
      width: 320px;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    }

    /* Position next to the content area (matches header: 1200px) */
    @media (min-width: 1300px) {
      .series-navigation {
        right: calc((100vw - 1200px) / 2 - 340px);
      }
    }
  }

  .series-header {
    @apply mb-4;
  }

  .series-label {
    @apply text-xs font-medium text-skin-accent opacity-80 mb-2 uppercase tracking-wider;
  }

  .series-title {
    @apply flex items-center gap-2 text-lg font-semibold text-skin-accent mb-1;
  }

  .series-icon {
    @apply text-base;
  }

  .series-progress {
    @apply text-sm text-skin-base opacity-70;
  }

  /* Mobile font size improvements */
  @media (max-width: 767px) {
    .series-label {
      @apply text-sm font-medium text-skin-accent opacity-80 mb-2 uppercase tracking-wider;
    }

    .series-title {
      @apply flex items-center gap-2 text-xl font-semibold text-skin-accent mb-1;
    }

    .series-progress {
      @apply text-base text-skin-base opacity-70;
    }

    .series-link {
      @apply text-skin-base hover:text-skin-accent transition-colors text-lg line-clamp-2;
    }

    .series-current-title {
      @apply text-skin-accent font-medium text-lg line-clamp-2;
    }

    .nav-title {
      @apply block text-sm text-skin-base line-clamp-2;
    }
  }

  .series-list {
    @apply space-y-2 mb-4;
  }

  .series-item {
    @apply flex items-start gap-3 p-3 rounded-md transition-colors;
  }

  .series-item.current {
    @apply bg-skin-accent bg-opacity-10;
  }

  .series-item.completed {
    @apply opacity-75;
  }

  .series-number {
    @apply flex-shrink-0 w-6 h-6 rounded-full bg-skin-accent bg-opacity-20 flex items-center justify-center text-xs font-medium;
  }

  .series-item.current .series-number {
    @apply bg-skin-accent text-skin-inverted;
  }

  .series-item.completed .series-number {
    @apply bg-green-500 text-white;
  }

  .series-content {
    @apply flex-1 min-w-0;
  }

  .series-link {
    @apply text-skin-base hover:text-skin-accent transition-colors text-base line-clamp-2;
    text-decoration: none;
  }

  .series-link:hover {
    @apply underline;
  }

  .series-current-title {
    @apply text-skin-accent font-medium text-base line-clamp-2;
  }

  .series-navigation-buttons {
    @apply flex gap-2 pt-3 border-t border-skin-line;
  }

  .series-nav-button {
    @apply flex-1 p-2 rounded-md border border-skin-line hover:bg-skin-card-muted transition-colors;
    text-decoration: none;
  }

  .series-nav-button.next {
    @apply text-right;
  }

  .nav-direction {
    @apply block text-xs font-medium text-skin-accent mb-1;
  }

  .nav-title {
    @apply block text-xs text-skin-base line-clamp-2;
  }

  .series-nav-button:hover .nav-title {
    @apply text-skin-accent;
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .series-navigation-buttons {
      @apply flex-col;
    }
    
    .series-nav-button.next {
      @apply text-left;
    }
  }
</style>

<script>
  function isIPhone() {
    return window.innerWidth <= 767;
  }

  function isTablet() {
    return window.innerWidth >= 768 && window.innerWidth <= 1024;
  }

  function initIPhoneToggle() {
    if (!isIPhone()) return;

    const inlineTag = document.getElementById('series-floating-tag-inline');
    const nav = document.getElementById('series-navigation');
    const chevron = document.querySelector('.series-chevron');

    if (!inlineTag || !nav) {
      console.warn('SeriesNav: iPhone - Missing elements', { inlineTag: !!inlineTag, nav: !!nav });
      return;
    }

    function toggleMobilePanel(event) {
      event?.preventDefault();
      event?.stopPropagation();
      
      console.log('üî• SERIES NAV TAP - iPhone', {
        timestamp: new Date().toLocaleTimeString(),
        windowWidth: window.innerWidth,
        currentClasses: nav.className,
        chevronTransform: chevron?.style.transform || 'none'
      });
      
      const wasOpen = nav.classList.contains('mobile-open');
      
      // NUCLEAR RESET - clear everything
      nav.classList.remove('mobile-open', 'open');
      nav.setAttribute('aria-hidden', 'true');
      if (chevron) chevron.style.transform = 'rotate(0deg)';
      
      // Force reflow
      nav.offsetHeight;
      
      if (!wasOpen) {
        nav.classList.add('mobile-open');
        nav.setAttribute('aria-hidden', 'false');
        if (chevron) chevron.style.transform = 'rotate(180deg)';
        console.log('‚úÖ iPhone navigation OPENED');
      } else {
        console.log('‚ùå iPhone navigation CLOSED');
      }
    }

    // Clean up any existing listeners
    if (inlineTag._seriesToggle) {
      inlineTag.removeEventListener('click', inlineTag._seriesToggle);
    }
    
    inlineTag._seriesToggle = toggleMobilePanel;
    inlineTag.addEventListener('click', toggleMobilePanel);
    console.log('üì± iPhone toggle initialized');
  }

  function initTabletToggle() {
    if (!isTablet()) return;

    const inlineTag = document.getElementById('series-floating-tag-inline');
    const nav = document.getElementById('series-navigation');
    const chevron = document.querySelector('.series-chevron');

    if (!inlineTag || !nav) {
      console.warn('SeriesNav: iPad - Missing elements', { inlineTag: !!inlineTag, nav: !!nav });
      return;
    }

    function toggleExpansion(event) {
      event?.preventDefault();
      event?.stopPropagation();
      
      console.log('üî• SERIES NAV TAP - iPad', {
        timestamp: new Date().toLocaleTimeString(),
        windowWidth: window.innerWidth,
        currentClasses: nav.className,
        chevronTransform: chevron?.style.transform || 'none'
      });
      
      const wasOpen = nav.classList.contains('open');
      
      // NUCLEAR RESET - clear everything
      nav.classList.remove('open', 'mobile-open');
      nav.setAttribute('aria-hidden', 'true');
      if (chevron) chevron.style.transform = 'rotate(0deg)';
      
      // Force reflow
      nav.offsetHeight;
      
      if (!wasOpen) {
        nav.classList.add('open');
        nav.setAttribute('aria-hidden', 'false');
        if (chevron) chevron.style.transform = 'rotate(180deg)';
        console.log('‚úÖ iPad navigation OPENED');
      } else {
        console.log('‚ùå iPad navigation CLOSED');
      }
    }

    // Clean up any existing listeners
    if (inlineTag._seriesToggle) {
      inlineTag.removeEventListener('click', inlineTag._seriesToggle);
    }
    
    inlineTag._seriesToggle = toggleExpansion;

    // Event listeners
    inlineTag.addEventListener('click', toggleExpansion);

    // ESC key to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && nav.classList.contains('open')) {
        nav.classList.remove('open');
        nav.setAttribute('aria-hidden', 'true');
      }
    });

    // Close on outside click
    document.addEventListener('click', (e) => {
      if (nav.classList.contains('open') && 
          !nav.contains(e.target) && 
          !inlineTag.contains(e.target)) {
        nav.classList.remove('open');
        nav.setAttribute('aria-hidden', 'true');
      }
    });
  }

  // Initialize when DOM is ready
  function initAllToggles() {
    initIPhoneToggle();
    initTabletToggle();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAllToggles);
  } else {
    initAllToggles();
  }

  // NUCLEAR RESET on window resize - fixes stuck states
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      const currentWidth = window.innerWidth;
      console.log('üîÑ WINDOW RESIZE - Resetting series nav state', { 
        newWidth: currentWidth,
        timestamp: new Date().toLocaleTimeString()
      });
      
      const nav = document.getElementById('series-navigation');
      const backdrop = document.getElementById('series-backdrop');
      const chevron = document.querySelector('.series-chevron');
      const inlineTag = document.getElementById('series-floating-tag-inline');
      
      if (!nav) return;
      
      // NUCLEAR RESET - clear everything
      nav.classList.remove('mobile-open', 'open');
      nav.setAttribute('aria-hidden', 'false');
      nav.style.transform = '';
      nav.style.opacity = '';
      nav.style.maxHeight = '';
      
      if (backdrop) {
        backdrop.classList.remove('show');
        document.body.style.overflow = '';
      }
      if (chevron) {
        chevron.style.transform = 'rotate(0deg)';
      }
      
      // Clean up event listeners completely
      if (inlineTag && inlineTag._seriesToggle) {
        inlineTag.removeEventListener('click', inlineTag._seriesToggle);
        delete inlineTag._seriesToggle;
      }
      
      // Force reflow
      nav.offsetHeight;
      
      console.log('üßπ State reset complete - reinitializing for current breakpoint');
      
      // Re-initialize for current breakpoint
      setTimeout(() => {
        initAllToggles();
      }, 100);
    }, 300);
  });

  // THEME CHANGE HANDLER - fixes broken listeners after theme switch
  function observeThemeChanges() {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
          console.log('üé® THEME CHANGED - Reinitializing series navigation');
          
          // Short delay to let theme change settle
          setTimeout(() => {
            const inlineTag = document.getElementById('series-floating-tag-inline');
            if (inlineTag && inlineTag._seriesToggle) {
              console.log('üîß Cleaning up old listeners after theme change');
              inlineTag.removeEventListener('click', inlineTag._seriesToggle);
              delete inlineTag._seriesToggle;
            }
            
            initAllToggles();
            console.log('‚ú® Series navigation reinitialized after theme change');
          }, 200);
        }
      });
    });
    
    observer.observe(document.documentElement, { attributes: true });
  }

  // Start observing theme changes
  observeThemeChanges();
</script>