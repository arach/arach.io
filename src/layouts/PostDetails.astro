---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import DownloadLink from "@components/DownloadLink.astro";
import SeriesNavigation from "@components/SeriesNavigation.astro";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  description,
  ogImage,
  readingTime,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};
---

<Layout {...layoutProps}>
  <Header />

  <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

  <main id="main-content">
    <!-- Series tag at top level -->
    {post.data.series && (
      <div class="series-floating-tag">
        Special series on AI
      </div>
    )}
    
    <!-- Title with Go back on same line -->
    <div class="mb-3 flex items-start justify-between">
      <div class="flex-1">
        <button
          class="go-back-btn-inline"
          onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24"
            ><path
              d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
            ></path>
          </svg><span>Go back</span>
        </button>
        <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
      </div>
    </div>
    
    <!-- Date/Reading time + Actions row -->
    <div class="flex items-center justify-between gap-4 mb-4">
      <div class="flex items-center gap-4">
        <Datetime
          pubDatetime={pubDatetime}
          modDatetime={modDatetime}
          size="sm"
          className=""
        />
        <span class="reading-time">
          Estimated Reading Time: {readingTime}
        </span>
      </div>
      <div class="flex items-center gap-3">
        <DownloadLink collection="blog" slug={post.slug} />
      </div>
    </div>
    
    <SeriesNavigation currentPost={post} />
    
    <article id="article" role="article" class="prose prose-lg mx-auto mt-8 w-full">
      <Content />
    </article>

    <ul class="my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
    </ul>

    <div class="my-6 flex justify-center">
      <DownloadLink collection="blog" slug={post.slug} />
    </div>

    <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <button
        id="back-to-top"
        class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
          <path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span>Back to Top</span>
      </button>

      <ShareLinks />
    </div>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full pb-12;
    max-width: 1200px; /* Match header nav width */
    padding-left: 2rem; /* 32px instead of 16px */
    padding-right: 2rem;
  }
  .go-back-btn-inline {
    @apply flex items-center gap-1 text-xs text-skin-base opacity-60 hover:opacity-80 transition-opacity mb-2;
    font-weight: 400;
  }
  
  .go-back-btn-inline svg {
    @apply w-3 h-3;
  }
  
  .post-title {
    @apply text-3xl font-bold text-skin-accent;
  }
  
  .series-floating-tag {
    @apply float-right text-xs font-medium text-skin-accent bg-skin-card border border-skin-accent px-3 py-1 rounded-full mb-4;
    opacity: 0.9;
    clear: both;
  }
  
  .reading-time {
    @apply text-xs font-medium text-skin-base bg-skin-card-muted px-3 py-1 rounded-full border border-skin-line;
    opacity: 0.8;
  }

  /* Flexible content layout system */
  .prose {
    max-width: none;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    font-size: 1.1875rem;
    line-height: 1.5; /* Tight like premium sites - efficient but comfortable */
    font-weight: 275; /* Ultra-light like Vercel/Linear - ethereal feel */
    letter-spacing: 0.005em; /* Subtle breathing room */
    color: rgb(var(--color-text-base));
  }

  /* Much tighter reading width for focused content */
  .prose p,
  .prose li,
  .prose h1,
  .prose h2, 
  .prose h3,
  .prose blockquote,
  .prose figure,
  .prose img {
    max-width: 55ch !important; /* Much narrower, premium reading width */
    margin-left: auto !important;
    margin-right: auto !important;
  }

  /* Content area with elegant boundary lines */
  .prose {
    position: relative;
    min-height: 200px; /* Ensure lines have height */
    padding: 2rem 0;
  }

  /* Visible boundary lines that define content area */
  .prose::before,
  .prose::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 1px;
    background: rgba(var(--color-border), 0.3); /* More visible lines */
    z-index: 1;
  }

  .prose::before {
    left: calc(50% - 32ch); /* Left boundary - adjusted for 55ch width */
  }

  .prose::after {
    right: calc(50% - 32ch); /* Right boundary - adjusted for 55ch width */
  }

  /* Special full-width sections */
  .prose .full-width {
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
  }

  /* Two-column text for variety */
  .prose .two-column {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    max-width: 100%;
    margin: 2rem auto;
  }

  @media (max-width: 768px) {
    .prose .two-column {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  .prose p {
    margin-bottom: 1.75em; /* 1.75em based on line-height for rhythm */
    text-align: left;
  }

  .prose h1 {
    font-size: 2.25rem;
    font-weight: 700;
    line-height: 1.2;
    margin-top: 0;
    margin-bottom: 1rem;
    color: rgb(var(--color-text-base));
  }

  .prose h2 {
    font-size: 1.75rem;
    font-weight: 600;
    line-height: 1.3;
    margin-top: 2.5em;
    margin-bottom: 1em;
    color: rgb(var(--color-text-base));
  }

  .prose h3 {
    font-size: 1.375rem;
    font-weight: 600;
    line-height: 1.4;
    margin-top: 2em;
    margin-bottom: 0.75em;
    color: rgb(var(--color-text-base));
  }

  .prose blockquote {
    @apply border-l-4 border-skin-accent bg-skin-card-muted px-6 py-4 my-8 rounded-r-lg;
    font-style: italic;
    font-size: 1.125rem;
  }

  .prose code {
    @apply bg-skin-card-muted px-2 py-1 rounded;
    font-size: 0.9em;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  }

  .prose strong, .prose b {
    font-weight: 600;
    color: rgb(var(--color-text-base));
  }

  .prose em, .prose i {
    font-style: italic;
  }

  /* Lists */
  .prose ul, .prose ol {
    margin-bottom: 1.75em;
    padding-left: 1.5em;
  }

  .prose li {
    margin-bottom: 0.5em;
  }

  /* Links */
  .prose a {
    color: rgb(var(--color-accent));
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
  }

  .prose a:hover {
    text-decoration-thickness: 2px;
  }
</style>

<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-bold";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
