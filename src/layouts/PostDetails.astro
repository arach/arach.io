---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import DownloadLink from "@components/DownloadLink.astro";
import SeriesNavigationMinimal from "@components/SeriesNavigationMinimal";
import { Icon } from 'astro-icon/components';
import { SITE } from "@config";
import { getCollection } from "astro:content";
import MidjourneyPrompt from "@components/MidjourneyPrompt";
import infinitePasteMachineImg from "../assets/images/infinite-paste-machine-1.png";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

// Get series data if post is part of a series
const allPosts = await getCollection("blog");
const seriesPosts = post.data.series ? allPosts
  .filter(p => 
    p.data.series?.name === post.data.series?.name && 
    !p.data.draft
  )
  .sort((a, b) => (a.data.series?.order || 0) - (b.data.series?.order || 0)) : [];

const currentIndex = seriesPosts.findIndex(p => p.slug === post.slug);
const previousPost = currentIndex > 0 ? seriesPosts[currentIndex - 1] : null;
const nextPost = currentIndex < seriesPosts.length - 1 ? seriesPosts[currentIndex + 1] : null;

// Only show series navigation if the current post is part of a series and series has more than one post
const showSeriesNav = post.data.series && seriesPosts.length > 1;

const {
  title,
  author,
  description,
  ogImage,
  thumbnail,
  readingTime,
  canonicalURL,
  pubDatetime,
  modDatetime,
  tags,
} = post.data;

const { Content } = await post.render();

// Use thumbnail if available, otherwise use ogImage, fallback to generated OG image
let ogImageUrl: string | undefined;
if (thumbnail) {
  // Thumbnail is an ImageMetadata object from Astro
  ogImageUrl = thumbnail.src;
} else if (ogImage) {
  ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
}

const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}/og.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};
---

<Layout {...layoutProps}>
  <Header />

  <!-- <div class="progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill">
    <div class="progress-bar h-1 w-0 bg-skin-accent" id="myBar"></div>
  </div> -->

  <!-- Series navigation moved to title area -->

  <main id="main-content" class="relative z-0 bg-skin-fill" style="background: rgb(var(--color-fill));">
    <!-- Series tag removed - now handled by minimal navigation -->
    
    <!-- Title with Go back and Series tag on same line for iPad -->
    <div class="mb-2 flex items-start justify-between">
      <div class="flex-1">
        <div class="header-row">
          <button
            class="go-back-btn-inline"
            onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24"
              ><path
                d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
              ></path>
            </svg><span class="go-back-full">Go back</span><span class="go-back-short">Back</span>
          </button>
          <!-- Series tag removed - now handled by minimal navigation -->
        </div>
        
        <div class="title-with-series">
        <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
        {showSeriesNav && (
          <SeriesNavigationMinimal 
            currentPost={post} 
            seriesPosts={seriesPosts}
            currentIndex={currentIndex}
            previousPost={previousPost}
            nextPost={nextPost}
            client:load
          />
        )}
      </div>
      </div>
    </div>

    <!-- Series navigation now handled by minimal component in top-right -->

    <!-- Series navigation slot removed - now handled by minimal component -->
    
    
    
    <!-- Date/Reading time + Actions row -->
    <div class="flex items-center justify-between gap-4 date-time-row">
      <div class="flex items-center gap-4">
        <Datetime
          pubDatetime={pubDatetime}
          modDatetime={modDatetime}
          size="sm"
          className=""
        />
        <span class="reading-time">
          <Icon name="lucide:clock" class="reading-time-icon" />
          <span class="reading-time-full">Estimated Reading Time: {readingTime}</span>
          <span class="reading-time-short">{readingTime}</span>
        </span>
      </div>
      <div class="flex items-center gap-3">
        <DownloadLink collection="blog" slug={post.slug} />
      </div>
    </div>
    
    <div class="article-shell relative z-50">
      <article id="article" role="article" class="prose prose-lg mx-auto w-full article-surface relative z-60">
        <Content />
      </article>
    </div>

    <ul class="my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
    </ul>

    <div class="my-6 flex justify-center">
      <DownloadLink collection="blog" slug={post.slug} />
    </div>

    <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <button
        id="back-to-top"
        class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
          <path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span>Back to Top</span>
      </button>

      <ShareLinks />
    </div>
  </main>
  <Footer />
</Layout>

<style>
  /* Series navigation CSS removed - handled by minimal component */
  main {
    @apply mx-auto w-full pb-12 px-4 sm:px-6 lg:px-8;
    max-width: 1200px; /* Match header width exactly */
  }
  .header-row {
    @apply flex items-center justify-between mb-2 relative z-30;
  }

  /* iPhone: Ensure header row is clickable and fix series nav wrapper */
  @media (max-width: 767px) {
    .header-row {
      @apply relative z-40;
    }

    /* Position series navigation wrapper properly on iPhone */
    .series-navigation-wrapper {
      @apply relative mt-1;
    }
  }

  .go-back-btn-inline {
    @apply flex items-center gap-1 text-xs text-skin-base opacity-60 hover:opacity-80 transition-opacity;
    font-weight: 400;
  }

  /* Default: show full "Go back" text, hide short "Back" text */
  .go-back-btn-inline .go-back-full {
    @apply inline;
  }

  .go-back-btn-inline .go-back-short {
    @apply hidden;
  }
  
  .go-back-btn-inline svg {
    @apply w-3 h-3;
  }

  /* Series tag CSS removed - handled by minimal component */
  
  .title-with-series {
    @apply flex items-start gap-3;
    justify-content: space-between;
  }

  .post-title {
    @apply text-3xl font-bold text-skin-accent;
    flex: 1;
  }

  /* Mobile: Stack vertically */
  @media (max-width: 767px) {
    .title-with-series {
      @apply flex-col;
    }
  }
  /* Series floating tag CSS removed - handled by minimal component */
  
  .reading-time {
    @apply flex items-center gap-1.5 text-xs text-skin-base;
    opacity: 0.6;
    white-space: nowrap;
  }

  .reading-time-icon {
    @apply w-3 h-3 flex-shrink-0;
  }

  .reading-time-full {
    @apply block;
  }

  .reading-time-short {
    @apply hidden;
  }

  /* iPhone optimizations */
  @media (max-width: 767px) {
    .post-title {
      @apply text-xl font-bold text-skin-accent mb-1; /* Reduced spacing */
    }

    .reading-time-full {
      @apply hidden;
    }

    .reading-time-short {
      @apply block;
    }

    /* Hide download button in header on iPhone */
    .flex.items-center.gap-3 {
      @apply hidden;
    }

    /* Tighter spacing between title and date/time */
    .header-row {
      @apply mb-0;
    }

    /* Minimal gap between date/time and first paragraph */
    .date-time-row {
      @apply mb-1;
    }

    /* Nuclear option - override ALL heading margins on iPhone */
    .prose h1,
    .prose h2 {
      margin-top: 1.25rem !important;
      margin-bottom: 0.75rem !important;
    }

    /* Slightly more spacing for h3+ */
    html body main article .prose h3,
    html body main article .prose h4,
    html body main article .prose h5,
    html body main article .prose h6,
    html body main article h3,
    html body main article h4,
    html body main article h5,
    html body main article h6 {
      margin-top: 0.5rem !important;
      margin-bottom: 0.5rem !important;
    }

    html .prose p {
      margin-bottom: 1.25rem !important;
    }

    /* First paragraph after title should have minimal top margin */
    html .prose > p:first-child {
      margin-top: 0 !important;
    }
  }

  /* Flexible content layout system */
  .prose {
    max-width: none;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    font-size: 1.1875rem;
    line-height: 1.5; /* Tight like premium sites - efficient but comfortable */
    font-weight: 275; /* Ultra-light like Vercel/Linear - ethereal feel */
    letter-spacing: 0.005em; /* Subtle breathing room */
    color: rgb(var(--color-text-base));
  }

  /* Use full available width within the container */
  .prose p,
  .prose li,
  .prose h1,
  .prose h2, 
  .prose h3,
  .prose blockquote,
  .prose figure,
  .prose img {
    max-width: 100% !important; /* Use full container width */
    margin-left: 0 !important;
    margin-right: 0 !important;
  }

  /* Content area with elegant boundary lines */
  .prose {
    position: relative;
    min-height: 200px; /* Ensure lines have height */
    padding: 0 0 2rem 0;
  }

  /* Remove vertical boundary lines for a cleaner, less decorative look */
  .prose::before,
  .prose::after {
    display: none;
  }

  /* Article surface styling: opaque text area only */
  .article-shell {
    @apply mx-auto w-full;
  }

  .article-surface {
    background: rgb(var(--color-fill)); /* fully opaque for crisp text */
  }

  /* Reduce chrome on mobile */
  @media (max-width: 767px) {
    .article-surface {
      background: rgb(var(--color-fill));
    }
  }

  /* Mobile: hide structural boundaries */
  @media (max-width: 767px) {
    .prose::before,
    .prose::after {
      display: none;
    }
  }

  /* Special full-width sections */
  .prose .full-width {
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
  }

  /* Two-column text for variety */
  .prose .two-column {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    max-width: 100%;
    margin: 2rem auto;
  }

  @media (max-width: 767px) {
    .prose .two-column {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  .prose p {
    margin-bottom: 1.75em; /* 1.75em based on line-height for rhythm */
    text-align: left;
  }

  .prose h1 {
    font-size: 2.25rem;
    font-weight: 700;
    line-height: 1.2;
    margin-top: 0;
    margin-bottom: 1rem;
    color: rgb(var(--color-text-base));
  }

  .prose h2 {
    font-size: 1.75rem;
    font-weight: 600;
    line-height: 1.3;
    margin-top: 2.5em;
    margin-bottom: 1em;
    color: rgb(var(--color-text-base));
  }

  .prose h3 {
    font-size: 1.375rem;
    font-weight: 600;
    line-height: 1.4;
    margin-top: 2em;
    margin-bottom: 0.75em;
    color: rgb(var(--color-text-base));
  }

  .prose blockquote {
    @apply border-l-4 border-skin-accent bg-skin-card-muted px-6 py-4 my-8 rounded-r-lg;
    font-style: italic;
    font-size: 1.125rem;
  }

  .prose code {
    @apply bg-skin-card-muted px-2 py-1 rounded;
    font-size: 0.9em;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  }

  .prose strong, .prose b {
    font-weight: 600;
    color: rgb(var(--color-text-base));
  }

  .prose em, .prose i {
    font-style: italic;
  }

  /* Lists */
  .prose ul, .prose ol {
    margin-bottom: 1.75em;
    padding-left: 1.5em;
  }

  .prose li {
    margin-bottom: 0.5em;
  }

  /* Links */
  .prose a {
    color: rgb(var(--color-accent));
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
  }

  .prose a:hover {
    text-decoration-thickness: 2px;
  }
</style>

<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const myBar = document.getElementById("myBar");
      if (myBar) {
        myBar.style.width = scrolled + "%";
      }
    }
  }
  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-bold";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
  
  /** Insert Midjourney component for specific posts */
  function insertMidjourneyComponent() {
    if (!window.location.pathname.includes('infinite-bespoke-magic-paste-machine')) return;
    
    // Find the comment marker in the rendered HTML
    const article = document.getElementById('article');
    if (!article) return;
    
    // Create a div for the component
    const componentDiv = document.createElement('div');
    componentDiv.id = 'midjourney-interactive-mount';
    componentDiv.className = 'my-12';
    
    // Find the heading "The New Strategic Framework"
    const headings = article.querySelectorAll('h2');
    for (const heading of headings) {
      if (heading.textContent?.includes('The New Strategic Framework')) {
        // Insert before this heading
        heading.parentNode?.insertBefore(componentDiv, heading);
        break;
      }
    }
  }
  
  // Run after DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', insertMidjourneyComponent);
  } else {
    insertMidjourneyComponent();
  }
</script>

{/* Render the Midjourney component that will be portaled to the right location */}
{post.slug === "infinite-bespoke-magic-paste-machine" && (
  <div id="midjourney-component-source" style="display: none;">
    <MidjourneyPrompt
      client:idle
      prompt="A sophisticated retro-futuristic paste machine, art deco industrial design, chrome and brass mechanisms, vacuum tubes glowing with data, streams of text flowing through transparent pipes, knowledge crystals being processed, technical blueprint aesthetic, cross-section view showing intricate gears and circuits processing information, vintage scientific illustration style --chaos 15 --stylize 750 --ar 16:9"
      imageUrl={infinitePasteMachineImg.src}
      midjourneyUrl="https://cdn.midjourney.com/68db614b-6818-4f5a-856a-7f4d64ef2c91/0_0.png"
    />
  </div>
)}

<script>
  // Move the component from hidden source to the mount point
  function moveComponent() {
    const source = document.getElementById('midjourney-component-source');
    const mount = document.getElementById('midjourney-interactive-mount');
    
    if (source && mount) {
      // Move all children from source to mount
      while (source.firstChild) {
        mount.appendChild(source.firstChild);
      }
      // Remove the source container
      source.remove();
    }
  }
  
  // Wait a bit for Astro to hydrate the component
  setTimeout(moveComponent, 100);
</script>
