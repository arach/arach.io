---
import { type CollectionEntry, getCollection } from "astro:content";
import BookPosts from "@layouts/Books.astro";
import BookDetails from "@layouts/BookDetails.astro";
import getSortedContent from "@utils/getSortedContent";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import getContentWithRT from "@utils/getContentWithRT";

export interface Props {
  book: CollectionEntry<"book">;
}

export async function getStaticPaths() {
  const books = await getCollection("book", ({ data }) => !data.draft);
  const booksWithRT = await getContentWithRT("book", books);

  const bookResult = booksWithRT.map((book: any) => ({
    params: { slug: book.slug },
    props: { book },
  }));

  const pagePaths = getPageNumbers(books.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...bookResult, ...pagePaths];
}

const { slug } = Astro.params;
const { book } = Astro.props;

const books = await getCollection(
  "book",
  (entry: CollectionEntry<"book">): boolean => {
    return !entry.data.draft;
  }
);

const sortedBooks = getSortedContent(books);

const pagination = getPagination({
  posts: sortedBooks.map(book => ({
    id: book.id,
    slug: book.slug,
    body: book.body,
    collection: book.collection,
    data: {
      ...book.data,
    },
  })),
  page: slug,
});
---

{
  book ? (
    <BookDetails book={book} />
  ) : (
    <BookPosts
      totalPages={pagination.totalPages}
      currentPage={pagination.currentPage}
      paginatedItems={pagination.paginatedPosts as any[]}
    />
  )
}
